"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorLogger = errorLogger;
exports.errorLoggerWithoutPromise = errorLoggerWithoutPromise;

var _config = require("../common/config");

var _stringBuilder = _interopRequireDefault(require("../common/string-builder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function errorLoggerWithoutPromise(error, config = {}) {
  const {
    config: {
      method,
      baseURL,
      params,
      url
    },
    response
  } = error;
  let status, statusText, data, headers;

  if (response) {
    status = response.status;
    statusText = response.statusText;
    data = response.data;
    headers = response.headers;
  }

  const buildConfig = (0, _config.assembleBuildConfig)(config);
  const stringBuilder = new _stringBuilder.default(buildConfig);
  const log = stringBuilder.makeLogTypeWithPrefix('Error').makeDateFormat(new Date()).makeMethod(method).makeUrl(url, baseURL).makeParams(params).makeStatus(status, statusText).makeHeader(headers).makeData(data).build();
  buildConfig.logger(log);
  return error;
}

function errorLogger(error, config) {
  return Promise.reject(errorLoggerWithoutPromise(error, config));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnZXIvZXJyb3IudHMiXSwibmFtZXMiOlsiZXJyb3JMb2dnZXJXaXRob3V0UHJvbWlzZSIsImVycm9yIiwiY29uZmlnIiwibWV0aG9kIiwiYmFzZVVSTCIsInBhcmFtcyIsInVybCIsInJlc3BvbnNlIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImRhdGEiLCJoZWFkZXJzIiwiYnVpbGRDb25maWciLCJzdHJpbmdCdWlsZGVyIiwiU3RyaW5nQnVpbGRlciIsImxvZyIsIm1ha2VMb2dUeXBlV2l0aFByZWZpeCIsIm1ha2VEYXRlRm9ybWF0IiwiRGF0ZSIsIm1ha2VNZXRob2QiLCJtYWtlVXJsIiwibWFrZVBhcmFtcyIsIm1ha2VTdGF0dXMiLCJtYWtlSGVhZGVyIiwibWFrZURhdGEiLCJidWlsZCIsImxvZ2dlciIsImVycm9yTG9nZ2VyIiwiUHJvbWlzZSIsInJlamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFQTs7QUFDQTs7OztBQUVBLFNBQVNBLHlCQUFULENBQW1DQyxLQUFuQyxFQUFzREMsTUFBc0IsR0FBRyxFQUEvRSxFQUFtRjtBQUUvRSxRQUFNO0FBQUNBLElBQUFBLE1BQU0sRUFBRTtBQUFFQyxNQUFBQSxNQUFGO0FBQVVDLE1BQUFBLE9BQVY7QUFBbUJDLE1BQUFBLE1BQW5CO0FBQTJCQyxNQUFBQTtBQUEzQixLQUFUO0FBQTJDQyxJQUFBQTtBQUEzQyxNQUF1RE4sS0FBN0Q7QUFFQSxNQUFJTyxNQUFKLEVBQVlDLFVBQVosRUFBd0JDLElBQXhCLEVBQThCQyxPQUE5Qjs7QUFDQSxNQUFJSixRQUFKLEVBQWM7QUFDVkMsSUFBQUEsTUFBTSxHQUFHRCxRQUFRLENBQUNDLE1BQWxCO0FBQ0FDLElBQUFBLFVBQVUsR0FBR0YsUUFBUSxDQUFDRSxVQUF0QjtBQUNBQyxJQUFBQSxJQUFJLEdBQUdILFFBQVEsQ0FBQ0csSUFBaEI7QUFDQUMsSUFBQUEsT0FBTyxHQUFHSixRQUFRLENBQUNJLE9BQW5CO0FBQ0g7O0FBRUQsUUFBTUMsV0FBVyxHQUFHLGlDQUFvQlYsTUFBcEIsQ0FBcEI7QUFFQSxRQUFNVyxhQUFhLEdBQUcsSUFBSUMsc0JBQUosQ0FBa0JGLFdBQWxCLENBQXRCO0FBQ0EsUUFBTUcsR0FBRyxHQUFHRixhQUFhLENBQ3BCRyxxQkFETyxDQUNlLE9BRGYsRUFFUEMsY0FGTyxDQUVRLElBQUlDLElBQUosRUFGUixFQUdQQyxVQUhPLENBR0loQixNQUhKLEVBSVBpQixPQUpPLENBSUNkLEdBSkQsRUFJTUYsT0FKTixFQUtQaUIsVUFMTyxDQUtJaEIsTUFMSixFQU1QaUIsVUFOTyxDQU1JZCxNQU5KLEVBTVlDLFVBTlosRUFPUGMsVUFQTyxDQU9JWixPQVBKLEVBUVBhLFFBUk8sQ0FRRWQsSUFSRixFQVNQZSxLQVRPLEVBQVo7QUFXQWIsRUFBQUEsV0FBVyxDQUFDYyxNQUFaLENBQW1CWCxHQUFuQjtBQUVBLFNBQU9kLEtBQVA7QUFDSDs7QUFFRCxTQUFTMEIsV0FBVCxDQUFxQjFCLEtBQXJCLEVBQXdDQyxNQUF4QyxFQUFpRTtBQUM3RCxTQUFPMEIsT0FBTyxDQUFDQyxNQUFSLENBQWU3Qix5QkFBeUIsQ0FBQ0MsS0FBRCxFQUFRQyxNQUFSLENBQXhDLENBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF4aW9zRXJyb3IgfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBFcnJvckxvZ0NvbmZpZyB9IGZyb20gJy4uL2NvbW1vbi90eXBlcyc7XG5pbXBvcnQgeyBhc3NlbWJsZUJ1aWxkQ29uZmlnIH0gZnJvbSAnLi4vY29tbW9uL2NvbmZpZyc7XG5pbXBvcnQgU3RyaW5nQnVpbGRlciBmcm9tICcuLi9jb21tb24vc3RyaW5nLWJ1aWxkZXInO1xuXG5mdW5jdGlvbiBlcnJvckxvZ2dlcldpdGhvdXRQcm9taXNlKGVycm9yOiBBeGlvc0Vycm9yLCBjb25maWc6IEVycm9yTG9nQ29uZmlnID0ge30pIHtcblxuICAgIGNvbnN0IHtjb25maWc6IHsgbWV0aG9kLCBiYXNlVVJMLCBwYXJhbXMsIHVybCB9LCByZXNwb25zZX0gPSBlcnJvcjtcblxuICAgIGxldCBzdGF0dXMsIHN0YXR1c1RleHQsIGRhdGEsIGhlYWRlcnM7XG4gICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgIHN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICAgICAgc3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXR1c1RleHQ7XG4gICAgICAgIGRhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICBoZWFkZXJzID0gcmVzcG9uc2UuaGVhZGVycztcbiAgICB9XG5cbiAgICBjb25zdCBidWlsZENvbmZpZyA9IGFzc2VtYmxlQnVpbGRDb25maWcoY29uZmlnKTtcblxuICAgIGNvbnN0IHN0cmluZ0J1aWxkZXIgPSBuZXcgU3RyaW5nQnVpbGRlcihidWlsZENvbmZpZyk7XG4gICAgY29uc3QgbG9nID0gc3RyaW5nQnVpbGRlclxuICAgICAgICAubWFrZUxvZ1R5cGVXaXRoUHJlZml4KCdFcnJvcicpXG4gICAgICAgIC5tYWtlRGF0ZUZvcm1hdChuZXcgRGF0ZSgpKVxuICAgICAgICAubWFrZU1ldGhvZChtZXRob2QpXG4gICAgICAgIC5tYWtlVXJsKHVybCwgYmFzZVVSTClcbiAgICAgICAgLm1ha2VQYXJhbXMocGFyYW1zKVxuICAgICAgICAubWFrZVN0YXR1cyhzdGF0dXMsIHN0YXR1c1RleHQpXG4gICAgICAgIC5tYWtlSGVhZGVyKGhlYWRlcnMpXG4gICAgICAgIC5tYWtlRGF0YShkYXRhKVxuICAgICAgICAuYnVpbGQoKTtcblxuICAgIGJ1aWxkQ29uZmlnLmxvZ2dlcihsb2cpO1xuXG4gICAgcmV0dXJuIGVycm9yO1xufVxuXG5mdW5jdGlvbiBlcnJvckxvZ2dlcihlcnJvcjogQXhpb3NFcnJvciwgY29uZmlnPzogRXJyb3JMb2dDb25maWcpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3JMb2dnZXJXaXRob3V0UHJvbWlzZShlcnJvciwgY29uZmlnKSk7XG59XG5cbmV4cG9ydCB7IGVycm9yTG9nZ2VyLCBlcnJvckxvZ2dlcldpdGhvdXRQcm9taXNlIH07XG4iXX0=